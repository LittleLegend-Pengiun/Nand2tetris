// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //Handle A-instruction - A register
    //If it is A-instruction, load, else take the output from the ALU
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=AregIn);
    Not(in=instruction[15], out=i1);
    //i1 = 0 -> C-Ã­ntruction
    //the 5th bit of C-instruction control the A-register, loadA depend on this bit
    Or(a=instruction[5], b=i1, out=loadA); 
    ARegister(in=AregIn, load=loadA, out=Aoutput, out[0..14]=addressM); //addressM has 15 bits

    //Handle D-register 
    //D-register only work if instruction's type is C (ins[15] = 1)
    //D-register load is 4th bit of C-instruction -> use And to ensure the instruction is C-type
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=Doutput);

    // set ALU's y-input to either A-register or M = RAM[A] - data memory
    // use the 12th bit of the C-instruction
    Mux16(a=Aoutput, b=inM, sel=instruction[12], out=ALUy);

    //ALU 
    //use 6th to 11th bit of instruction
    ALU(x=Doutput, y=ALUy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, zr=zr, ng=ng, out=outM);

    
    Not(in=zr, out=notzr); //If ALU's computed value is 0
    Not(in=ng, out=notng); //If ALU's computed value is negative
    And(a=notzr, b=notng, out=pos); //if ALU's computed value is positive

    // check for jump (three LSB is 1, the result depend on the ALU output)
    And(a=instruction[2], b=ng, out=negjump); // jump if negative
    And(a=instruction[1], b=zr, out=zrjump); // jump if zero
    And(a=instruction[0], b=pos, out=posjump); // jump if positive

    Or(a=negjump, b=zrjump, out=jump1);
    Or(a=jump1, b=posjump, out=jump); // jump if any jump conditions met (beq, beqz, jump if bigger of smaller-> the result is positive or negative)

    And(a=jump, b=instruction[15], out=loadpc); // jump only occurs with C-instruction

    // reset, load, or increment PC
    /* 
    if (jump = 1) PC = A-register
    else PC++ 
    reset = 1, PC = 0
    */
    PC(in=Aoutput, load=loadpc, inc=true, reset=reset, out[0..14]=pc);

    // writeM is 3rd bit of C-instruction -> 15th bit = 1, result depend on the other
    And(a=instruction[15], b=instruction[3], out=writeM); 

}